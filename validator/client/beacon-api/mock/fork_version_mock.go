// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/fork_version.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/prysmaticlabs/prysm/v3/consensus-types/primitives"
)

// MockforkVersionProvider is a mock of forkVersionProvider interface.
type MockforkVersionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockforkVersionProviderMockRecorder
}

// MockforkVersionProviderMockRecorder is the mock recorder for MockforkVersionProvider.
type MockforkVersionProviderMockRecorder struct {
	mock *MockforkVersionProvider
}

// NewMockforkVersionProvider creates a new mock instance.
func NewMockforkVersionProvider(ctrl *gomock.Controller) *MockforkVersionProvider {
	mock := &MockforkVersionProvider{ctrl: ctrl}
	mock.recorder = &MockforkVersionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockforkVersionProvider) EXPECT() *MockforkVersionProviderMockRecorder {
	return m.recorder
}

// GetForkVersion mocks base method.
func (m *MockforkVersionProvider) GetForkVersion(epoch types.Epoch) ([4]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForkVersion", epoch)
	ret0, _ := ret[0].([4]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForkVersion indicates an expected call of GetForkVersion.
func (mr *MockforkVersionProviderMockRecorder) GetForkVersion(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForkVersion", reflect.TypeOf((*MockforkVersionProvider)(nil).GetForkVersion), epoch)
}
