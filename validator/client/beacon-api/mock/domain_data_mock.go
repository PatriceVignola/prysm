// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/domain_data.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/prysmaticlabs/prysm/v3/consensus-types/primitives"
	eth "github.com/prysmaticlabs/prysm/v3/proto/prysm/v1alpha1"
)

// MockdomainDataProvider is a mock of domainDataProvider interface.
type MockdomainDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockdomainDataProviderMockRecorder
}

// MockdomainDataProviderMockRecorder is the mock recorder for MockdomainDataProvider.
type MockdomainDataProviderMockRecorder struct {
	mock *MockdomainDataProvider
}

// NewMockdomainDataProvider creates a new mock instance.
func NewMockdomainDataProvider(ctrl *gomock.Controller) *MockdomainDataProvider {
	mock := &MockdomainDataProvider{ctrl: ctrl}
	mock.recorder = &MockdomainDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdomainDataProvider) EXPECT() *MockdomainDataProviderMockRecorder {
	return m.recorder
}

// GetDomainData mocks base method.
func (m *MockdomainDataProvider) GetDomainData(epoch types.Epoch, domainType []byte) (*eth.DomainResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainData", epoch, domainType)
	ret0, _ := ret[0].(*eth.DomainResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDomainData indicates an expected call of GetDomainData.
func (mr *MockdomainDataProviderMockRecorder) GetDomainData(epoch, domainType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainData", reflect.TypeOf((*MockdomainDataProvider)(nil).GetDomainData), epoch, domainType)
}
